{{>licenseInfo}}
package {{apiPackage}}

import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
{{#featureResources}}
import {{packageName}}.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
{{/featureResources}}
import {{packageName}}.infrastructure.ApiPrincipal
{{#imports}}import {{import}}
{{/imports}}

{{#operations}}
/**
 * {{classname}} Interface
 * Defines API methods for {{classname}}
 */
interface {{classname}} {
    {{#operation}}
    suspend fun {{operationId}}(call: ApplicationCall)
    {{/operation}}
}

fun Route.{{classname}}(api: {{classname}}) {
    {{#operation}}
    {{#hasAuthMethods}}
        {{#authMethods}}
    authenticate("{{{name}}}") {
        {{/authMethods}}
    {{/hasAuthMethods}}

    /**
     * API Operation: {{summary}}
     * Method: {{httpMethod}} {{path}}
     * Description: {{description}}
     * Returns: {{#responses}}{{^isDefault}}{{dataType}}{{/isDefault}}{{/responses}}
     */
    {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}("{{path}}") {
        {{#queryParams}}
        // val {{paramName}} = call.request.queryParameters["{{paramName}}"]
        {{/queryParams}}
        {{#bodyParam}}
        // val requestBody = call.receive<{{dataType}}>()
        {{/bodyParam}}
        // Call API method
        api.{{operationId}}(call)
    }

    {{#hasAuthMethods}}
    }
    {{/hasAuthMethods}}

    {{/operation}}
}
{{/operations}}
